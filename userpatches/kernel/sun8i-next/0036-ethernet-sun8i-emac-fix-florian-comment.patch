From 3dec265a955630c8d2ef891588f8697b8817a69b Mon Sep 17 00:00:00 2001
From: LABBE Corentin <clabbe.montjoie@gmail.com>
Date: Mon, 13 Jun 2016 11:48:54 +0200
Subject: [PATCH 36/37] ethernet: sun8i-emac fix florian comment

Signed-off-by: LABBE Corentin <clabbe.montjoie@gmail.com>
---
 drivers/net/ethernet/allwinner/sun8i-emac.c | 374 ++++++++++++++--------------
 1 file changed, 192 insertions(+), 182 deletions(-)

diff --git a/drivers/net/ethernet/allwinner/sun8i-emac.c b/drivers/net/ethernet/allwinner/sun8i-emac.c
index 5ddf8d3..881a9bc 100644
--- a/drivers/net/ethernet/allwinner/sun8i-emac.c
+++ b/drivers/net/ethernet/allwinner/sun8i-emac.c
@@ -68,6 +68,13 @@
 
 #define SUN8I_COULD_BE_USED_BY_DMA BIT(31)
 
+/* Basic CTL0 */
+#define BCTL0_FD BIT(0)
+#define BCTL0_SPEED_10		2
+#define BCTL0_SPEED_100		3
+#define BCTL0_SPEED_MASK	GENMASK(3, 2)
+#define BCTL0_SPEED_SHIFT	2
+
 #define FLOW_RX 1
 #define FLOW_TX 2
 
@@ -76,41 +83,38 @@
 #define MAP_PAGE 2
 
 enum emac_variant {
+	NONE_EMAC,/* for be sure that variant is non-0 if set */
 	A83T_EMAC,
 	H3_EMAC,
 	A64_EMAC,
 };
 
-struct ethtool_str {
-	char name[ETH_GSTRING_LEN];
-};
-
-static const struct ethtool_str estats_str[] = {
+static const char const estats_str[][ETH_GSTRING_LEN] = {
 	/* errors */
-	{ "rx_payload_error" },
-	{ "rx_CRC_error" },
-	{ "rx_phy_error" },
-	{ "rx_length_error" },
-	{ "rx_col_error" },
-	{ "rx_header_error" },
-	{ "rx_overflow_error" },
-	{ "rx_saf_error" },
-	{ "rx_daf_error" },
-	{ "rx_buf_error" },
+	"rx_payload_error",
+	"rx_CRC_error",
+	"rx_phy_error",
+	"rx_length_error",
+	"rx_col_error",
+	"rx_header_error",
+	"rx_overflow_error",
+	"rx_saf_error",
+	"rx_daf_error",
+	"rx_buf_error",
 	/* misc infos */
-	{ "tx_stop_queue" },
-	{ "rx_dma_ua" },
-	{ "rx_dma_stop" },
-	{ "tx_dma_ua" },
-	{ "tx_dma_stop" },
-	{ "rx_hw_csum" },
-	{ "tx_hw_csum" },
+	"tx_stop_queue",
+	"rx_dma_ua",
+	"rx_dma_stop",
+	"tx_dma_ua",
+	"tx_dma_stop",
+	"rx_hw_csum",
+	"tx_hw_csum",
 	/* interrupts */
-	{ "rx_early_int" },
-	{ "tx_early_int" },
-	{ "tx_underflow_int" },
+	"rx_early_int",
+	"tx_early_int",
+	"tx_underflow_int",
 	/* debug */
-	{ "tx_used_desc" },
+	"tx_used_desc",
 };
 
 struct sun8i_emac_stats {
@@ -157,7 +161,7 @@ struct dma_desc {
 	u32 st; /* Information on the frame */
 	u32 buf_addr; /* physical address of the frame data */
 	u32 next; /* physical address of next dma_desc */
-} __packed;
+};
 
 struct sun8i_emac_priv {
 	void __iomem *base;
@@ -165,8 +169,8 @@ struct sun8i_emac_priv {
 	int irq;
 	struct device *dev;
 	struct net_device *ndev;
+	struct platform_device *pdev;
 	struct mii_bus *mdio;
-	spinlock_t lock;/* for adjust_link */
 	spinlock_t tx_lock;/* control the access of transmit descriptors */
 	int duplex;
 	int speed;
@@ -187,8 +191,8 @@ struct sun8i_emac_priv {
 	dma_addr_t dd_rx_phy;
 	struct dma_desc *dd_tx;
 	dma_addr_t dd_tx_phy;
-	struct sk_buff **rx_sk;
-	struct sk_buff **tx_sk;
+	struct sk_buff **rx_skb;
+	struct sk_buff **tx_skb;
 	int *tx_map;
 
 	int nbdesc_tx;
@@ -202,6 +206,8 @@ struct sun8i_emac_priv {
 	int pause;
 };
 
+static irqreturn_t sun8i_emac_dma_interrupt(int irq, void *dev_id);
+
 static void rb_inc(int *p, const int max)
 {
 	(*p)++;
@@ -226,35 +232,36 @@ static int rb_tx_numfreedesc(struct net_device *ndev)
  *
  * @i index of slot to fill
 */
-static int sun8i_emac_rx_sk(struct net_device *ndev, int i)
+static int sun8i_emac_rx_skb(struct net_device *ndev, int i)
 {
 	struct sun8i_emac_priv *priv = netdev_priv(ndev);
 	struct dma_desc *ddesc;
-	struct sk_buff *sk;
+	struct sk_buff *skb;
 
 	ddesc = priv->dd_rx + i;
 
 	ddesc->st = 0;
 
-	sk = netdev_alloc_skb_ip_align(ndev, DESC_BUF_MAX);
-	if (!sk)
+	skb = netdev_alloc_skb_ip_align(ndev, DESC_BUF_MAX);
+	if (!skb)
 		return -ENOMEM;
 
 	/* should not happen */
-	if (unlikely(priv->rx_sk[i]))
+	if (unlikely(priv->rx_skb[i]))
 		dev_warn(priv->dev, "BUG: Leaking a skbuff\n");
 
-	priv->rx_sk[i] = sk;
+	priv->rx_skb[i] = skb;
 
-	ddesc->buf_addr = dma_map_single(priv->dev, sk->data,
+	ddesc->buf_addr = dma_map_single(priv->dev, skb->data,
 					 DESC_BUF_MAX, DMA_FROM_DEVICE);
 	if (dma_mapping_error(priv->dev, ddesc->buf_addr)) {
 		dev_err(priv->dev, "ERROR: Cannot dma_map RX buffer\n");
-		dev_kfree_skb(sk);
+		dev_kfree_skb(skb);
 		return -EFAULT;
 	}
 	ddesc->st |= DESC_BUF_MAX;
-	ddesc->status = BIT(31);
+	wmb();/* SUN8I_COULD_BE_USED_BY_DMA must be the last value written */
+	ddesc->status = SUN8I_COULD_BE_USED_BY_DMA;
 
 	return 0;
 }
@@ -343,20 +350,19 @@ static void sun8i_emac_set_link_mode(struct sun8i_emac_priv *priv)
 	v = readl(priv->base + SUN8I_EMAC_BASIC_CTL0);
 
 	if (priv->duplex)
-		v |= BIT(0);
+		v |= BCTL0_FD;
 	else
-		v &= ~BIT(0);
+		v &= ~BCTL0_FD;
 
-	v &= ~0x0C;
+	v &= ~BCTL0_SPEED_MASK;
 	switch (priv->speed) {
 	case 1000:
 		break;
 	case 100:
-		v |= BIT(2);
-		v |= BIT(3);
+		v |= BCTL0_SPEED_100 << BCTL0_SPEED_SHIFT;
 		break;
 	case 10:
-		v |= BIT(3);
+		v |= BCTL0_SPEED_10 << BCTL0_SPEED_SHIFT;
 		break;
 	}
 
@@ -364,12 +370,12 @@ static void sun8i_emac_set_link_mode(struct sun8i_emac_priv *priv)
 }
 
 static void sun8i_emac_flow_ctrl(struct sun8i_emac_priv *priv, int duplex,
-				 int fc, int pause)
+				 int fc)
 {
 	u32 flow = 0;
 
-	netif_dbg(priv, link, priv->ndev, "%s %d %d %d\n", __func__,
-		  duplex, fc, pause);
+	netif_dbg(priv, link, priv->ndev, "%s %d %d\n", __func__,
+		  duplex, fc);
 
 	flow = readl(priv->base + SUN8I_EMAC_RX_CTL0);
 	if (fc & FLOW_RX)
@@ -393,10 +399,10 @@ static int sun8i_emac_rx_from_ddesc(struct net_device *ndev, int i)
 	struct sun8i_emac_priv *priv = netdev_priv(ndev);
 	struct dma_desc *ddesc = priv->dd_rx + i;
 	int frame_len;
-	int crc_checked = 0;
+	int rxcsum_done = 0;
 
 	if (ndev->features & NETIF_F_RXCSUM)
-		crc_checked = 1;
+		rxcsum_done = 1;
 
 	/* bit0/bit7 work only on IPv4/IPv6 TCP traffic,
 	 * (not on ARP for example) so we dont raise rx_errors/discard frame
@@ -404,55 +410,63 @@ static int sun8i_emac_rx_from_ddesc(struct net_device *ndev, int i)
 	/* the checksum or length of received frame's payload is wrong*/
 	if (ddesc->status & BIT(0)) {
 		priv->estats.rx_payload_error++;
-		crc_checked = 0;
+		rxcsum_done = 0;
 	}
+	/* RX_CRC_ERR */
 	if (ddesc->status & BIT(1)) {
 		priv->ndev->stats.rx_errors++;
 		priv->ndev->stats.rx_crc_errors++;
 		priv->estats.rx_crc_error++;
 		goto discard_frame;
 	}
+	/* RX_PHY_ERR */
 	if ((ddesc->status & BIT(3))) {
 		priv->ndev->stats.rx_errors++;
 		priv->estats.rx_phy_error++;
 		goto discard_frame;
 	}
+	/* RX_LENGTH_ERR */
 	if ((ddesc->status & BIT(4))) {
 		priv->ndev->stats.rx_errors++;
 		priv->ndev->stats.rx_length_errors++;
 		priv->estats.rx_length_error++;
 		goto discard_frame;
 	}
+	/* RX_COL_ERR */
 	if ((ddesc->status & BIT(6))) {
 		priv->ndev->stats.rx_errors++;
 		priv->estats.rx_col_error++;
 		goto discard_frame;
 	}
+	/* RX_HEADER_ERR */
 	if ((ddesc->status & BIT(7))) {
 		priv->estats.rx_header_error++;
-		crc_checked = 0;
+		rxcsum_done = 0;
 	}
+	/* RX_OVERFLOW_ERR */
 	if ((ddesc->status & BIT(11))) {
 		priv->ndev->stats.rx_over_errors++;
 		priv->estats.rx_overflow_error++;
 		goto discard_frame;
 	}
+	/* RX_NO_ENOUGTH_BUF_ERR */
 	if ((ddesc->status & BIT(14))) {
 		priv->ndev->stats.rx_errors++;
 		priv->estats.rx_buf_error++;
 		goto discard_frame;
 	}
 
+	/* TODO BIT(9) define */
 	if ((ddesc->status & BIT(9)) == 0) {
 		/* begin of a Jumbo frame */
-		dev_warn(priv->dev, "This should not happen\n");
+		dev_warn_ratelimited(priv->dev, "This should not happen\n");
 		goto discard_frame;
 	}
 	frame_len = (ddesc->status >> 16) & 0x3FFF;
 	if (!(ndev->features & NETIF_F_RXFCS))
 		frame_len -= ETH_FCS_LEN;
 
-	skb = priv->rx_sk[i];
+	skb = priv->rx_skb[i];
 
 	netif_dbg(priv, rx_status, priv->ndev,
 		  "%s from %02d %pad len=%d status=%x st=%x\n",
@@ -463,17 +477,16 @@ static int sun8i_emac_rx_from_ddesc(struct net_device *ndev, int i)
 	dma_unmap_single(priv->dev, ddesc->buf_addr, DESC_BUF_MAX,
 			 DMA_FROM_DEVICE);
 	skb->protocol = eth_type_trans(skb, priv->ndev);
-	if (crc_checked) {
+	if (rxcsum_done) {
 		skb->ip_summed = CHECKSUM_UNNECESSARY;
 		priv->estats.rx_hw_csum++;
 	} else {
 		skb->ip_summed = CHECKSUM_PARTIAL;
 	}
-	skb->dev = priv->ndev;
 
 	priv->ndev->stats.rx_packets++;
 	priv->ndev->stats.rx_bytes += frame_len;
-	priv->rx_sk[i] = NULL;
+	priv->rx_skb[i] = NULL;
 
 	/* this frame is not the last */
 	if ((ddesc->status & BIT(8)) == 0) {
@@ -481,15 +494,17 @@ static int sun8i_emac_rx_from_ddesc(struct net_device *ndev, int i)
 			 frame_len);
 	}
 
-	sun8i_emac_rx_sk(ndev, i);
+	sun8i_emac_rx_skb(ndev, i);
 
+	/*netif_receive_skb(skb);*/
 	netif_rx(skb);
 
 	return 0;
 	/* If the frame need to be dropped, we simply reuse the buffer */
 discard_frame:
 	ddesc->st = DESC_BUF_MAX;
-	ddesc->status = BIT(31);
+	wmb();/* SUN8I_COULD_BE_USED_BY_DMA must be the last value written */
+	ddesc->status = SUN8I_COULD_BE_USED_BY_DMA;
 	return 0;
 }
 
@@ -499,11 +514,15 @@ static int sun8i_emac_receive_all(struct net_device *ndev)
 {
 	struct sun8i_emac_priv *priv = netdev_priv(ndev);
 	struct dma_desc *ddesc;
+	int start = priv->rx_dirty;
 
 	ddesc = priv->dd_rx + priv->rx_dirty;
 	while (!(ddesc->status & BIT(31))) {
 		sun8i_emac_rx_from_ddesc(ndev, priv->rx_dirty);
 		rb_inc(&priv->rx_dirty, priv->nbdesc_rx);
+		/* prevent to use too many time in case of flood */
+		if (priv->rx_dirty == start)
+			return 0;
 		ddesc = priv->dd_rx + priv->rx_dirty;
 	};
 
@@ -529,8 +548,8 @@ static int sun8i_emac_complete_xmit(struct net_device *ndev)
 		ddesc = priv->dd_tx + priv->tx_dirty;
 
 		if (ddesc->status & BIT(31)) {
-			dev_info(priv->dev, "BUG: DMA still set %d %d\n",
-				 priv->tx_dirty, priv->tx_slot);
+			dev_err(priv->dev, "BUG: DMA still set %d %d\n",
+				priv->tx_dirty, priv->tx_slot);
 			return 0;
 		}
 
@@ -538,8 +557,8 @@ static int sun8i_emac_complete_xmit(struct net_device *ndev)
 			return 0;
 
 		if (ddesc->status == 0 && !ddesc->st) {
-			dev_info(priv->dev, "BUG: reached the void %d %d\n",
-				 priv->tx_dirty, priv->tx_slot);
+			dev_err(priv->dev, "BUG: reached the void %d %d\n",
+				priv->tx_dirty, priv->tx_slot);
 			return 0;
 		}
 
@@ -579,13 +598,14 @@ static int sun8i_emac_complete_xmit(struct net_device *ndev)
 			dma_unmap_page(priv->dev, ddesc->buf_addr,
 				       frame_len, DMA_TO_DEVICE);
 		/* we can free skb only on last frame */
-		if (priv->tx_sk[priv->tx_dirty] && (ddesc->st & BIT(30)))
-			dev_kfree_skb_irq(priv->tx_sk[priv->tx_dirty]);
+		if (priv->tx_skb[priv->tx_dirty] && (ddesc->st & BIT(30)))
+			dev_kfree_skb_irq(priv->tx_skb[priv->tx_dirty]);
 
-		priv->tx_sk[priv->tx_dirty] = NULL;
+		priv->tx_skb[priv->tx_dirty] = NULL;
 		priv->tx_map[priv->tx_dirty] = 0;
-		ddesc->status = DCLEAN;
 		ddesc->st = 0;
+		wmb(); /* setting to DCLEAN is the last value to be set */
+		ddesc->status = DCLEAN;
 
 		rb_inc(&priv->tx_dirty, priv->nbdesc_tx);
 		ddesc = priv->dd_tx + priv->tx_dirty;
@@ -693,7 +713,7 @@ static int sun8i_emac_mdio_register(struct net_device *ndev)
 	bus->name = dev_name(priv->dev);
 	bus->read = &sun8i_mdio_read;
 	bus->write = &sun8i_mdio_write;
-	snprintf(bus->id, MII_BUS_ID_SIZE, "%s-%x", bus->name, 0);
+	snprintf(bus->id, MII_BUS_ID_SIZE, "%s-%x", bus->name, priv->dev->id);
 
 	bus->parent = priv->dev;
 	bus->priv = ndev;
@@ -709,11 +729,11 @@ static int sun8i_emac_mdio_register(struct net_device *ndev)
 	return 0;
 }
 
+/* Run within phydev->lock */
 static void sun8i_emac_adjust_link(struct net_device *ndev)
 {
 	struct sun8i_emac_priv *priv = netdev_priv(ndev);
 	struct phy_device *phydev = ndev->phydev;
-	unsigned long flags;
 	int new_state = 0;
 
 	netif_dbg(priv, link, priv->ndev,
@@ -722,8 +742,6 @@ static void sun8i_emac_adjust_link(struct net_device *ndev)
 	if (!phydev)
 		return;
 
-	spin_lock_irqsave(&priv->lock, flags);
-
 	if (phydev->link) {
 		if (phydev->duplex != priv->duplex) {
 			new_state = 1;
@@ -731,7 +749,7 @@ static void sun8i_emac_adjust_link(struct net_device *ndev)
 		}
 		if (phydev->pause)
 			sun8i_emac_flow_ctrl(priv, phydev->duplex,
-					     priv->flow_ctrl, priv->pause);
+					     priv->flow_ctrl);
 
 		if (phydev->speed != priv->speed) {
 			new_state = 1;
@@ -757,8 +775,6 @@ static void sun8i_emac_adjust_link(struct net_device *ndev)
 
 	if (new_state)
 		phy_print_status(phydev);
-
-	spin_unlock_irqrestore(&priv->lock, flags);
 }
 
 /* H3 specific bits for EPHY */
@@ -811,8 +827,10 @@ static int sun8i_emac_set_syscon_ephy(struct net_device *ndev, u32 *reg)
 		*reg |= H3_EPHY_LED_POL;
 
 	ret = of_mdio_parse_addr(priv->dev, priv->phy_node);
-	if (ret < 0)
+	if (ret < 0) {
+		netdev_err(ndev, "Could not parse MDIO addr\n");
 		return ret;
+	}
 
 	/* of_mdio_parse_addr returns a valid (0 ~ 31) PHY
 	 * address. No need to mask it again.
@@ -940,11 +958,6 @@ static int sun8i_emac_init(struct net_device *ndev)
 		return priv->phy_interface;
 	}
 
-	/* Set interface mode (and configure internal PHY on H3) */
-	ret = sun8i_emac_set_syscon(ndev);
-	if (ret)
-		return ret;
-
 	ret = clk_prepare_enable(priv->ahb_clk);
 	if (ret) {
 		netdev_err(ndev, "Could not enable ahb clock\n");
@@ -987,12 +1000,6 @@ static int sun8i_emac_init(struct net_device *ndev)
 			goto err_regulator_io;
 	}
 
-	sun8i_emac_set_mdc(ndev);
-
-	ret = sun8i_emac_mdio_register(ndev);
-	if (ret)
-		goto err_mdio_register;
-
 	return 0;
 
 err_mdio_register:
@@ -1039,8 +1046,6 @@ static void sun8i_emac_uninit(struct net_device *ndev)
 		reset_control_assert(priv->rst);
 
 	clk_disable_unprepare(priv->ahb_clk);
-
-	sun8i_emac_unset_syscon(ndev);
 }
 
 static int sun8i_emac_mdio_probe(struct net_device *ndev)
@@ -1072,7 +1077,7 @@ static int sun8i_emac_mdio_probe(struct net_device *ndev)
 /* Allocate both RX and TX ring buffer and init them
  * This function also write the startbase of thoses ring in the device.
  * All structures that help managing thoses rings are also handled
- * by this functions (rx_sk/tx_sk/tx_map)
+ * by this functions (rx_skb/tx_skb/tx_map)
  */
 static int sun8i_emac_alloc_rings(struct net_device *ndev)
 {
@@ -1080,17 +1085,17 @@ static int sun8i_emac_alloc_rings(struct net_device *ndev)
 	struct dma_desc *ddesc;
 	int err, i;
 
-	priv->rx_sk = kcalloc(priv->nbdesc_rx, sizeof(struct sk_buff *),
+	priv->rx_skb = kcalloc(priv->nbdesc_rx, sizeof(struct sk_buff *),
 			      GFP_KERNEL);
-	if (!priv->rx_sk) {
+	if (!priv->rx_skb) {
 		err = -ENOMEM;
-		goto rx_sk_error;
+		goto rx_skb_error;
 	}
-	priv->tx_sk = kcalloc(priv->nbdesc_tx, sizeof(struct sk_buff *),
+	priv->tx_skb = kcalloc(priv->nbdesc_tx, sizeof(struct sk_buff *),
 			      GFP_KERNEL);
-	if (!priv->tx_sk) {
+	if (!priv->tx_skb) {
 		err = -ENOMEM;
-		goto tx_sk_error;
+		goto tx_skb_error;
 	}
 	priv->tx_map = kcalloc(priv->nbdesc_tx, sizeof(int), GFP_KERNEL);
 	if (!priv->tx_map) {
@@ -1098,7 +1103,7 @@ static int sun8i_emac_alloc_rings(struct net_device *ndev)
 		goto tx_map_error;
 	}
 
-	priv->dd_rx = dma_alloc_coherent(priv->dev,
+	priv->dd_rx = dma_zalloc_coherent(priv->dev,
 			priv->nbdesc_rx * sizeof(struct dma_desc),
 			&priv->dd_rx_phy,
 			GFP_KERNEL);
@@ -1107,10 +1112,9 @@ static int sun8i_emac_alloc_rings(struct net_device *ndev)
 		err = -ENOMEM;
 		goto dma_rx_error;
 	}
-	memset(priv->dd_rx, 0, priv->nbdesc_rx * sizeof(struct dma_desc));
 	ddesc = priv->dd_rx;
 	for (i = 0; i < priv->nbdesc_rx; i++) {
-		sun8i_emac_rx_sk(ndev, i);
+		sun8i_emac_rx_skb(ndev, i);
 		ddesc->next = (u32)priv->dd_rx_phy + (i + 1)
 			* sizeof(struct dma_desc);
 		ddesc++;
@@ -1119,7 +1123,7 @@ static int sun8i_emac_alloc_rings(struct net_device *ndev)
 	ddesc--;
 	ddesc->next = (u32)priv->dd_rx_phy;
 
-	priv->dd_tx = dma_alloc_coherent(priv->dev,
+	priv->dd_tx = dma_zalloc_coherent(priv->dev,
 			priv->nbdesc_tx * sizeof(struct dma_desc),
 			&priv->dd_tx_phy,
 			GFP_KERNEL);
@@ -1128,7 +1132,6 @@ static int sun8i_emac_alloc_rings(struct net_device *ndev)
 		err = -ENOMEM;
 		goto dma_tx_error;
 	}
-	memset(priv->dd_tx, 0, priv->nbdesc_tx * sizeof(struct dma_desc));
 	ddesc = priv->dd_tx;
 	for (i = 0; i < priv->nbdesc_tx; i++) {
 		ddesc->status = DCLEAN;
@@ -1158,20 +1161,54 @@ dma_tx_error:
 dma_rx_error:
 	kfree(priv->tx_map);
 tx_map_error:
-	kfree(priv->tx_sk);
-tx_sk_error:
-	kfree(priv->rx_sk);
-rx_sk_error:
+	kfree(priv->tx_skb);
+tx_skb_error:
+	kfree(priv->rx_skb);
+rx_skb_error:
 	return err;
 }
 
 static int sun8i_emac_open(struct net_device *ndev)
 {
+	struct resource *res;
 	struct sun8i_emac_priv *priv = netdev_priv(ndev);
 	int err;
 	u32 v;
+	struct platform_device *pdev = priv->pdev;
 
-	err = sun8i_emac_mdio_probe(ndev);
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	priv->base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(priv->base)) {
+		err = PTR_ERR(priv->base);
+		dev_err(&pdev->dev, "Cannot request MMIO: %d\n", err);
+		return err;
+	}
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "syscon");
+	priv->syscon = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(priv->syscon)) {
+		err = PTR_ERR(priv->syscon);
+		dev_err(&pdev->dev,
+			"Cannot map system control registers: %d\n", err);
+		return err;
+	}
+
+	priv->irq = platform_get_irq(pdev, 0);
+	if (priv->irq < 0) {
+		err = priv->irq;
+		dev_err(&pdev->dev, "Cannot claim IRQ: %d\n", err);
+		return err;
+	}
+
+	err = devm_request_irq(&pdev->dev, priv->irq, sun8i_emac_dma_interrupt,
+			       0, dev_name(&pdev->dev), ndev);
+	if (err) {
+		dev_err(&pdev->dev, "Cannot request IRQ: %d\n", err);
+		return err;
+	}
+
+	/* Set interface mode (and configure internal PHY on H3) */
+	err = sun8i_emac_set_syscon(ndev);
 	if (err)
 		return err;
 
@@ -1184,11 +1221,19 @@ static int sun8i_emac_open(struct net_device *ndev)
 	if (err) {
 		dev_err(priv->dev, "EMAC reset timeout\n");
 		err = -EFAULT;
-		goto err_emac_timeout;
+		goto err_syscon;
 	}
 
 	sun8i_emac_set_mdc(ndev);
 
+	err = sun8i_emac_mdio_register(ndev);
+	if (err)
+		goto err_syscon;
+
+	err = sun8i_emac_mdio_probe(ndev);
+	if (err)
+		goto err_syscon;
+
 	/* DMA */
 	v = (8 << 24);/* burst len */
 	writel(v, priv->base + SUN8I_EMAC_BASIC_CTL1);
@@ -1229,11 +1274,10 @@ static int sun8i_emac_open(struct net_device *ndev)
 	err = sun8i_emac_alloc_rings(ndev);
 	if (err) {
 		netdev_err(ndev, "Fail to allocate rings\n");
-		goto err_emac_timeout;
+		goto err_mdio;
 	}
 
-	if (ndev->phydev)
-		phy_start(ndev->phydev);
+	phy_start(ndev->phydev);
 
 	sun8i_emac_start_rx(ndev);
 	sun8i_emac_start_tx(ndev);
@@ -1241,8 +1285,10 @@ static int sun8i_emac_open(struct net_device *ndev)
 	netif_start_queue(ndev);
 
 	return 0;
-err_emac_timeout:
+err_mdio:
 	phy_disconnect(ndev->phydev);
+err_syscon:
+	sun8i_emac_unset_syscon(ndev);
 	return err;
 }
 
@@ -1257,7 +1303,7 @@ static void sun8i_emac_tx_clean(struct net_device *ndev)
 	spin_lock(&priv->tx_lock);
 
 	for (i = 0; i < priv->nbdesc_tx; i++) {
-		if (priv->tx_sk[i]) {
+		if (priv->tx_skb[i]) {
 			ddesc = priv->dd_tx + i;
 			frame_len = ddesc->st & 0x3FFF;
 			switch (priv->tx_map[i]) {
@@ -1273,8 +1319,8 @@ static void sun8i_emac_tx_clean(struct net_device *ndev)
 				dev_err(priv->dev, "Trying to free an empty slot\n");
 				continue;
 			}
-			dev_kfree_skb_any(priv->tx_sk[i]);
-			priv->tx_sk[i] = NULL;
+			dev_kfree_skb_any(priv->tx_skb[i]);
+			priv->tx_skb[i] = NULL;
 			ddesc->st = 0;
 			ddesc->status = DCLEAN;
 		}
@@ -1294,12 +1340,12 @@ static void sun8i_emac_rx_clean(struct net_device *ndev)
 
 	/* clean RX ring */
 	for (i = 0; i < priv->nbdesc_rx; i++)
-		if (priv->rx_sk[i]) {
+		if (priv->rx_skb[i]) {
 			ddesc = priv->dd_rx + i;
 			dma_unmap_single(priv->dev, ddesc->buf_addr,
 					 DESC_BUF_MAX, DMA_FROM_DEVICE);
-			dev_kfree_skb_any(priv->rx_sk[i]);
-			priv->rx_sk[i] = NULL;
+			dev_kfree_skb_any(priv->rx_skb[i]);
+			priv->rx_skb[i] = NULL;
 		}
 }
 
@@ -1310,16 +1356,14 @@ static int sun8i_emac_stop(struct net_device *ndev)
 	sun8i_emac_stop_tx(ndev);
 	sun8i_emac_stop_rx(ndev);
 
-	netif_carrier_off(ndev);
-
 	phy_stop(ndev->phydev);
 	phy_disconnect(ndev->phydev);
 
 	sun8i_emac_rx_clean(ndev);
 	sun8i_emac_tx_clean(ndev);
 
-	kfree(priv->rx_sk);
-	kfree(priv->tx_sk);
+	kfree(priv->rx_skb);
+	kfree(priv->tx_skb);
 	kfree(priv->tx_map);
 
 	dma_free_coherent(priv->dev, priv->nbdesc_rx * sizeof(struct dma_desc),
@@ -1327,6 +1371,8 @@ static int sun8i_emac_stop(struct net_device *ndev)
 	dma_free_coherent(priv->dev, priv->nbdesc_tx * sizeof(struct dma_desc),
 			  priv->dd_tx, priv->dd_tx_phy);
 
+	sun8i_emac_unset_syscon(ndev);
+
 	return 0;
 }
 
@@ -1336,19 +1382,17 @@ static netdev_tx_t sun8i_emac_xmit(struct sk_buff *skb, struct net_device *ndev)
 	struct dma_desc *ddesc;
 	struct dma_desc *first;
 	int i = 0, rbd_first;
-	unsigned int len, fraglen;
+	unsigned int len, fraglen, tlen;
 	u32 v;
 	int n;
 	int nf;
 	const skb_frag_t *frag;
 	int do_csum = 0;
 
+	if (skb_put_padto(skb, ETH_ZLEN))
+		return NETDEV_TX_OK;
 	len = skb_headlen(skb);
-	if (len < ETH_ZLEN) {
-		if (skb_padto(skb, ETH_ZLEN))
-			return NETDEV_TX_OK;
-		len = ETH_ZLEN;
-	}
+
 	n = skb_shinfo(skb)->nr_frags;
 
 	if (skb->ip_summed == CHECKSUM_PARTIAL) {
@@ -1386,10 +1430,9 @@ static netdev_tx_t sun8i_emac_xmit(struct sk_buff *skb, struct net_device *ndev)
 		goto xmit_error;
 	}
 	priv->tx_map[i] = MAP_SINGLE;
-	priv->tx_sk[i] = skb;
-	priv->ndev->stats.tx_packets++;
-	priv->ndev->stats.tx_bytes += len;
+	priv->tx_skb[i] = skb;
 
+	tlen = len;
 	ddesc->st = len;
 	/* undocumented bit that make it works */
 	ddesc->st |= BIT(24);
@@ -1400,11 +1443,11 @@ static netdev_tx_t sun8i_emac_xmit(struct sk_buff *skb, struct net_device *ndev)
 	for (nf = 0; nf < n; nf++) {
 		frag = &skb_shinfo(skb)->frags[nf];
 		rb_inc(&i, priv->nbdesc_tx);
-		priv->tx_sk[i] = skb;
+		priv->tx_skb[i] = skb;
 		ddesc = priv->dd_tx + i;
 		fraglen = skb_frag_size(frag);
 		ddesc->st = fraglen;
-		priv->ndev->stats.tx_bytes += fraglen;
+		tlen += fraglen,
 		ddesc->st |= BIT(24);
 		if (do_csum)
 			ddesc->st |= SUN8I_EMAC_TX_DO_CRC;
@@ -1428,7 +1471,8 @@ static netdev_tx_t sun8i_emac_xmit(struct sk_buff *skb, struct net_device *ndev)
 
 	/* frame begin */
 	first->st |= BIT(29);
-	first->status = BIT(31);
+	wmb();/* SUN8I_COULD_BE_USED_BY_DMA must be the last value written */
+	first->status = SUN8I_COULD_BE_USED_BY_DMA;
 	priv->tx_slot = i;
 
 	/* Trying to optimize this (recording DMA start/stop) seems
@@ -1446,6 +1490,8 @@ static netdev_tx_t sun8i_emac_xmit(struct sk_buff *skb, struct net_device *ndev)
 		priv->estats.tx_stop_queue++;
 	}
 	priv->estats.tx_used_desc = rb_tx_numfreedesc(ndev);
+	priv->ndev->stats.tx_packets++;
+	priv->ndev->stats.tx_bytes += tlen;
 
 	spin_unlock(&priv->tx_lock);
 
@@ -1455,10 +1501,12 @@ xmit_error:
 	/* destroy skb and return TX OK Documentation/DMA-API-HOWTO.txt */
 	/* clean descritors from rbd_first to i */
 	ddesc->st = 0;
+	wmb(); /* setting to DCLEAN is the last value to be set */
 	ddesc->status = DCLEAN;
 	do {
 		ddesc = priv->dd_tx + rbd_first;
 		ddesc->st = 0;
+		wmb(); /* setting to DCLEAN is the last value to be set */
 		ddesc->status = DCLEAN;
 		rb_inc(&rbd_first, priv->nbdesc_tx);
 	} while (rbd_first != i);
@@ -1601,7 +1649,7 @@ static int sun8i_emac_ioctl(struct net_device *ndev, struct ifreq *rq, int cmd)
 static int sun8i_emac_check_if_running(struct net_device *ndev)
 {
 	if (!netif_running(ndev))
-		return -EBUSY;
+		return -EINVAL;
 	return 0;
 }
 
@@ -1631,7 +1679,6 @@ static int sun8i_emac_ethtool_get_settings(struct net_device *ndev,
 		return -EBUSY;
 	}
 
-	cmd->transceiver = XCVR_INTERNAL;
 	return phy_ethtool_gset(phy, cmd);
 }
 
@@ -1665,9 +1712,7 @@ static void sun8i_emac_ethtool_strings(struct net_device *dev, u32 stringset,
 {
 	switch (stringset) {
 	case ETH_SS_STATS:
-		memcpy(buffer, &estats_str,
-		       sun8i_emac_get_sset_count(dev, ETH_SS_STATS) *
-			sizeof(struct ethtool_str));
+		memcpy(buffer, &estats_str, sizeof(estats_str));
 		break;
 	}
 }
@@ -1721,8 +1766,7 @@ static int sun8i_emac_set_pauseparam(struct net_device *ndev,
 		if (netif_running(ndev))
 			ret = phy_start_aneg(phy);
 	} else {
-		sun8i_emac_flow_ctrl(priv, phy->duplex, priv->flow_ctrl,
-				     priv->pause);
+		sun8i_emac_flow_ctrl(priv, phy->duplex, priv->flow_ctrl);
 	}
 	return ret;
 }
@@ -1758,8 +1802,8 @@ static int sun8i_emac_ethtool_set_ringparam(struct net_device *ndev,
 	sun8i_emac_rx_clean(ndev);
 	sun8i_emac_tx_clean(ndev);
 
-	kfree(priv->rx_sk);
-	kfree(priv->tx_sk);
+	kfree(priv->rx_skb);
+	kfree(priv->tx_skb);
 	kfree(priv->tx_map);
 
 	dma_free_coherent(priv->dev, priv->nbdesc_rx * sizeof(struct dma_desc),
@@ -1795,8 +1839,6 @@ static const struct ethtool_ops sun8i_emac_ethtool_ops = {
 	.set_pauseparam = sun8i_emac_set_pauseparam,
 	.get_ethtool_stats = sun8i_emac_ethtool_stats,
 	.get_strings = sun8i_emac_ethtool_strings,
-	.get_wol = NULL,
-	.set_wol = NULL,
 	.get_sset_count = sun8i_emac_get_sset_count,
 	.get_drvinfo = sun8i_emac_ethtool_getdrvinfo,
 	.get_msglevel = sun8i_emac_ethtool_getmsglevel,
@@ -1813,23 +1855,21 @@ static const struct net_device_ops sun8i_emac_netdev_ops = {
 	.ndo_stop = sun8i_emac_stop,
 	.ndo_change_mtu = sun8i_emac_change_mtu,
 	.ndo_fix_features = sun8i_emac_fix_features,
+	.ndo_set_features = sun8i_emac_set_features,
 	.ndo_set_rx_mode = sun8i_emac_set_rx_mode,
 	.ndo_tx_timeout = sun8i_emac_tx_timeout,
 	.ndo_do_ioctl = sun8i_emac_ioctl,
 	.ndo_set_mac_address = eth_mac_addr,
-	.ndo_set_features = sun8i_emac_set_features,
 };
 
 static irqreturn_t sun8i_emac_dma_interrupt(int irq, void *dev_id)
 {
-	struct net_device *ndev = (struct net_device *)dev_id;
+	struct net_device *ndev = dev_id;
 	struct sun8i_emac_priv *priv = netdev_priv(ndev);
 	u32 v, u;
 
 	v = readl(priv->base + SUN8I_EMAC_INT_STA);
 
-	netif_info(priv, intr, ndev, "%s %x\n", __func__, v);
-
 	/* When this bit is asserted, a frame transmission is completed. */
 	if (v & BIT(0))
 		sun8i_emac_complete_xmit(ndev);
@@ -1897,7 +1937,6 @@ static irqreturn_t sun8i_emac_dma_interrupt(int irq, void *dev_id)
 
 static int sun8i_emac_probe(struct platform_device *pdev)
 {
-	struct resource *res;
 	struct device_node *np = pdev->dev.of_node;
 	struct sun8i_emac_priv *priv;
 	struct net_device *ndev;
@@ -1918,36 +1957,9 @@ static int sun8i_emac_probe(struct platform_device *pdev)
 	platform_set_drvdata(pdev, ndev);
 
 	priv->variant = (enum emac_variant)of_device_get_match_data(&pdev->dev);
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	priv->base = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(priv->base)) {
-		ret = PTR_ERR(priv->base);
-		dev_err(&pdev->dev, "Cannot request MMIO: %d\n", ret);
-		goto probe_err;
-	}
-
-	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "syscon");
-	priv->syscon = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(priv->syscon)) {
-		ret = PTR_ERR(priv->syscon);
-		dev_err(&pdev->dev,
-			"Cannot map system control registers: %d\n", ret);
-		goto probe_err;
-	}
-
-	priv->irq = platform_get_irq(pdev, 0);
-	if (priv->irq < 0) {
-		ret = priv->irq;
-		dev_err(&pdev->dev, "Cannot claim IRQ: %d\n", ret);
-		goto probe_err;
-	}
-
-	ret = devm_request_irq(&pdev->dev, priv->irq, sun8i_emac_dma_interrupt,
-			       0, dev_name(&pdev->dev), ndev);
-	if (ret) {
-		dev_err(&pdev->dev, "Cannot request IRQ: %d\n", ret);
-		goto probe_err;
+	if (!priv->variant) {
+		dev_err(&pdev->dev, "Missing variant\n");
+		return -EINVAL;
 	}
 
 	priv->ahb_clk = devm_clk_get(&pdev->dev, "ahb");
@@ -2017,7 +2029,6 @@ static int sun8i_emac_probe(struct platform_device *pdev)
 		dev_info(&pdev->dev, "PHY IO regulator found\n");
 	}
 
-	spin_lock_init(&priv->lock);
 	spin_lock_init(&priv->tx_lock);
 
 	ndev->netdev_ops = &sun8i_emac_netdev_ops;
@@ -2025,9 +2036,7 @@ static int sun8i_emac_probe(struct platform_device *pdev)
 
 	priv->ndev = ndev;
 	priv->dev = &pdev->dev;
-
-	ndev->base_addr = (unsigned long)priv->base;
-	ndev->irq = priv->irq;
+	priv->pdev = pdev;
 
 	ndev->hw_features = NETIF_F_SG | NETIF_F_HIGHDMA;
 	ndev->hw_features |= NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM |
@@ -2039,6 +2048,7 @@ static int sun8i_emac_probe(struct platform_device *pdev)
 	ndev->priv_flags |= IFF_UNICAST_FLT;
 
 	ndev->watchdog_timeo = msecs_to_jiffies(5000);
+	netif_carrier_off(ndev);
 
 	/* Benched on OPIPC with 100M, setting more than 256 does not give any
 	 * perf boost
-- 
2.9.0

